import { Candidate, Variant } from './candidate';
import { compileAstNodes } from './compile';
import { ClassEntry, VariantEntry } from './intellisense';
import { Theme } from './theme';
import { Utilities } from './utilities';
import { Variants } from './variants';

declare const DEBUG: boolean;

declare const env_DEBUG: typeof DEBUG;
declare namespace env {
  export { env_DEBUG as DEBUG };
}

type DesignSystem = {
    theme: Theme;
    utilities: Utilities;
    variants: Variants;
    invalidCandidates: Set<string>;
    important: boolean;
    getClassOrder(classes: string[]): [string, bigint | null][];
    getClassList(): ClassEntry[];
    getVariants(): VariantEntry[];
    parseCandidate(candidate: string): Readonly<Candidate>[];
    parseVariant(variant: string): Readonly<Variant> | null;
    compileAstNodes(candidate: Candidate): ReturnType<typeof compileAstNodes>;
    getVariantOrder(): Map<Variant, number>;
    resolveThemeValue(path: string): string | undefined;
    candidatesToCss(classes: string[]): (string | null)[];
};

declare function compile(css: string, { base, onDependency, shouldRewriteUrls, }: {
    base: string;
    onDependency: (path: string) => void;
    shouldRewriteUrls?: boolean;
}): Promise<{
    globs: {
        base: string;
        pattern: string;
    }[];
    root: null | "none" | {
        base: string;
        pattern: string;
    };
    build(candidates: string[]): string;
}>;
declare function __unstable__loadDesignSystem(css: string, { base }: {
    base: string;
}): Promise<DesignSystem>;

declare function normalizePath(originalPath: string): string;

export { __unstable__loadDesignSystem, compile, env, normalizePath };
